const gameInfo = document.querySelector(".game-status");
const gameBox = document.querySelector(".game-box");
const boxes = document.querySelectorAll(".box");
const gameStartButton = document.querySelector(".game-start-button");
const gameStopButton = document.querySelector(".game-stop-button");
// initial game values
let currentPlayer;
let gameGrid = [];
let isGameProgress = false;
let winner = null;
let winningPostions = [
  [0, 1, 2],
  [3, 4, 5],
  [6, 7, 8],
  [0, 3, 6],
  [1, 4, 7],
  [2, 5, 8],
  [2, 4, 6],
  [0, 4, 8],
];
// listen to the box
boxes.forEach((box) => {
  box.addEventListener("click", (event) => {
    // what if the user clicked before starting the game .
    if (!isGameProgress) return;
    let boxIndex = event.target.dataset.box - 1;
    handleClick(boxIndex);
  });
});

function setBoxEmpty() {
  boxes.forEach((box) => {
    box.innerHTML = "";
    box.classList.add("cursor-pointer");
  });
}
// initialize game
function checkGameStatus() {
  if (isGameProgress) {
    gameStartButton.classList.add("hidden");
    gameStopButton.classList.remove("hidden");
  } else {
    gameStopButton.classList.add("hidden");
    gameStartButton.classList.remove("hidden");
  }
}
function setGameInfo() {
  if (isGameProgress)
    winner == null
      ? (gameInfo.textContent = `Current Player - ${currentPlayer}`)
      : (gameInfo.textContent = `Winner - ${winner}`);
  else gameInfo.textContent = `Tic Tac Toe`;
  // set the current player
}
function startGame() {
  isGameProgress = true;
  initGame();
  // set the current palyer
  setGameInfo();
  // check the game status
  checkGameStatus();
}
function stopGame() {
  isGameProgress = false;
  checkGameStatus();
  initGame();
}
function checkGameOver() {
  winningPostions.forEach((position) => {
    if (
      (gameGrid[position[0]] != "" ||
        gameGrid[position[1]] != "" ||
        gameGrid[position[2]] != "") &&
      gameGrid[position[0]] == gameGrid[position[1]] &&
      gameGrid[position[1]] == gameGrid[position[2]]
    ) {
      winner = gameGrid[position[0]];
      boxes[position[0]].classList.add("win");
      boxes[position[1]].classList.add("win");
      boxes[position[2]].classList.add("win");
      setGameInfo();
      isGameProgress = false;
      checkGameStatus();
    }
  });
  // set game draw
}

function initGame() {
  currentPlayer = "X";
  gameGrid = ["", "", "", "", "", "", "", "", ""];
  setGameInfo();
  // set box empty
  setBoxEmpty();
  checkGameStatus();
  // clear the bg of winner
  boxes.forEach((box) => {
    if (box.classList.contains("win")) {
      box.classList.remove("win");
    }
  });
}

function swapPlayer() {
  currentPlayer == "X" ? (currentPlayer = "O") : (currentPlayer = "X");
  setGameInfo();
}
function handleClick(boxIndex) {
  if (boxes[boxIndex].innerHTML != "") return;
  boxes[boxIndex].textContent = `${currentPlayer}`;
  boxes[boxIndex].classList.remove("cursor-pointer");
  gameGrid[boxIndex] = currentPlayer;
  swapPlayer();
  checkGameOver();
}

gameStartButton.addEventListener("click", (e) => {
  startGame();
});
gameStopButton.addEventListener("click", (e) => {
  stopGame();
});
initGame();
